// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// mass_weighted_rcpp
List mass_weighted_rcpp(const ComplexVector data_fft, const NumericVector query_window, uint32_t data_size, uint32_t window_size, const NumericVector data_mean, const NumericVector data_sd, double query_mean, double query_sd, const NumericVector data_pre, const NumericVector weight, const bool normalized);
RcppExport SEXP _matrixprofiler_mass_weighted_rcpp(SEXP data_fftSEXP, SEXP query_windowSEXP, SEXP data_sizeSEXP, SEXP window_sizeSEXP, SEXP data_meanSEXP, SEXP data_sdSEXP, SEXP query_meanSEXP, SEXP query_sdSEXP, SEXP data_preSEXP, SEXP weightSEXP, SEXP normalizedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const ComplexVector >::type data_fft(data_fftSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type query_window(query_windowSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type data_size(data_sizeSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type window_size(window_sizeSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type data_mean(data_meanSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type data_sd(data_sdSEXP);
    Rcpp::traits::input_parameter< double >::type query_mean(query_meanSEXP);
    Rcpp::traits::input_parameter< double >::type query_sd(query_sdSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type data_pre(data_preSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const bool >::type normalized(normalizedSEXP);
    rcpp_result_gen = Rcpp::wrap(mass_weighted_rcpp(data_fft, query_window, data_size, window_size, data_mean, data_sd, query_mean, query_sd, data_pre, weight, normalized));
    return rcpp_result_gen;
END_RCPP
}
// mass_absolute_rcpp
List mass_absolute_rcpp(const ComplexVector data_fft, const NumericVector query_window, uint32_t data_size, uint32_t window_size, const NumericVector sumx2, double sumy2);
RcppExport SEXP _matrixprofiler_mass_absolute_rcpp(SEXP data_fftSEXP, SEXP query_windowSEXP, SEXP data_sizeSEXP, SEXP window_sizeSEXP, SEXP sumx2SEXP, SEXP sumy2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const ComplexVector >::type data_fft(data_fftSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type query_window(query_windowSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type data_size(data_sizeSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type window_size(window_sizeSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type sumx2(sumx2SEXP);
    Rcpp::traits::input_parameter< double >::type sumy2(sumy2SEXP);
    rcpp_result_gen = Rcpp::wrap(mass_absolute_rcpp(data_fft, query_window, data_size, window_size, sumx2, sumy2));
    return rcpp_result_gen;
END_RCPP
}
// mass2_rcpp
List mass2_rcpp(const ComplexVector data_fft, const NumericVector query_window, uint64_t data_size, uint32_t window_size, const NumericVector data_mean, const NumericVector data_sd, double query_mean, double query_sd);
RcppExport SEXP _matrixprofiler_mass2_rcpp(SEXP data_fftSEXP, SEXP query_windowSEXP, SEXP data_sizeSEXP, SEXP window_sizeSEXP, SEXP data_meanSEXP, SEXP data_sdSEXP, SEXP query_meanSEXP, SEXP query_sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const ComplexVector >::type data_fft(data_fftSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type query_window(query_windowSEXP);
    Rcpp::traits::input_parameter< uint64_t >::type data_size(data_sizeSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type window_size(window_sizeSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type data_mean(data_meanSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type data_sd(data_sdSEXP);
    Rcpp::traits::input_parameter< double >::type query_mean(query_meanSEXP);
    Rcpp::traits::input_parameter< double >::type query_sd(query_sdSEXP);
    rcpp_result_gen = Rcpp::wrap(mass2_rcpp(data_fft, query_window, data_size, window_size, data_mean, data_sd, query_mean, query_sd));
    return rcpp_result_gen;
END_RCPP
}
// mass3_rcpp
List mass3_rcpp(const NumericVector query_window, const NumericVector data_ref, uint64_t data_size, uint32_t window_size, const NumericVector data_mean, const NumericVector data_sd, double query_mean, double query_sd, uint32_t k);
RcppExport SEXP _matrixprofiler_mass3_rcpp(SEXP query_windowSEXP, SEXP data_refSEXP, SEXP data_sizeSEXP, SEXP window_sizeSEXP, SEXP data_meanSEXP, SEXP data_sdSEXP, SEXP query_meanSEXP, SEXP query_sdSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type query_window(query_windowSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type data_ref(data_refSEXP);
    Rcpp::traits::input_parameter< uint64_t >::type data_size(data_sizeSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type window_size(window_sizeSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type data_mean(data_meanSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type data_sd(data_sdSEXP);
    Rcpp::traits::input_parameter< double >::type query_mean(query_meanSEXP);
    Rcpp::traits::input_parameter< double >::type query_sd(query_sdSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(mass3_rcpp(query_window, data_ref, data_size, window_size, data_mean, data_sd, query_mean, query_sd, k));
    return rcpp_result_gen;
END_RCPP
}
// mass3_rcpp_parallel
List mass3_rcpp_parallel(const NumericVector query_window, const NumericVector data_ref, uint64_t data_size, uint32_t window_size, const NumericVector data_mean, const NumericVector data_sd, double query_mean, double query_sd, uint16_t k);
RcppExport SEXP _matrixprofiler_mass3_rcpp_parallel(SEXP query_windowSEXP, SEXP data_refSEXP, SEXP data_sizeSEXP, SEXP window_sizeSEXP, SEXP data_meanSEXP, SEXP data_sdSEXP, SEXP query_meanSEXP, SEXP query_sdSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type query_window(query_windowSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type data_ref(data_refSEXP);
    Rcpp::traits::input_parameter< uint64_t >::type data_size(data_sizeSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type window_size(window_sizeSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type data_mean(data_meanSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type data_sd(data_sdSEXP);
    Rcpp::traits::input_parameter< double >::type query_mean(query_meanSEXP);
    Rcpp::traits::input_parameter< double >::type query_sd(query_sdSEXP);
    Rcpp::traits::input_parameter< uint16_t >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(mass3_rcpp_parallel(query_window, data_ref, data_size, window_size, data_mean, data_sd, query_mean, query_sd, k));
    return rcpp_result_gen;
END_RCPP
}
// set_k_rcpp
uint32_t set_k_rcpp(uint32_t k, uint64_t data_size, uint64_t window_size);
RcppExport SEXP _matrixprofiler_set_k_rcpp(SEXP kSEXP, SEXP data_sizeSEXP, SEXP window_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< uint32_t >::type k(kSEXP);
    Rcpp::traits::input_parameter< uint64_t >::type data_size(data_sizeSEXP);
    Rcpp::traits::input_parameter< uint64_t >::type window_size(window_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(set_k_rcpp(k, data_size, window_size));
    return rcpp_result_gen;
END_RCPP
}
// find_best_k_rcpp
uint32_t find_best_k_rcpp(const NumericVector data_ref, const NumericVector query_ref, uint32_t window_size);
RcppExport SEXP _matrixprofiler_find_best_k_rcpp(SEXP data_refSEXP, SEXP query_refSEXP, SEXP window_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type data_ref(data_refSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type query_ref(query_refSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type window_size(window_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(find_best_k_rcpp(data_ref, query_ref, window_size));
    return rcpp_result_gen;
END_RCPP
}
// mass_pre_rcpp
List mass_pre_rcpp(const NumericVector data_ref, const NumericVector query_ref, uint32_t window_size);
RcppExport SEXP _matrixprofiler_mass_pre_rcpp(SEXP data_refSEXP, SEXP query_refSEXP, SEXP window_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type data_ref(data_refSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type query_ref(query_refSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type window_size(window_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(mass_pre_rcpp(data_ref, query_ref, window_size));
    return rcpp_result_gen;
END_RCPP
}
// mass_pre_abs_rcpp
List mass_pre_abs_rcpp(const NumericVector data_ref, const NumericVector query_ref, uint32_t window_size);
RcppExport SEXP _matrixprofiler_mass_pre_abs_rcpp(SEXP data_refSEXP, SEXP query_refSEXP, SEXP window_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type data_ref(data_refSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type query_ref(query_refSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type window_size(window_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(mass_pre_abs_rcpp(data_ref, query_ref, window_size));
    return rcpp_result_gen;
END_RCPP
}
// mass_pre_weighted_rcpp
List mass_pre_weighted_rcpp(const NumericVector data_ref, const NumericVector query_ref, uint32_t window_size, const NumericVector weight);
RcppExport SEXP _matrixprofiler_mass_pre_weighted_rcpp(SEXP data_refSEXP, SEXP query_refSEXP, SEXP window_sizeSEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type data_ref(data_refSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type query_ref(query_refSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type window_size(window_sizeSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(mass_pre_weighted_rcpp(data_ref, query_ref, window_size, weight));
    return rcpp_result_gen;
END_RCPP
}
// std_rcpp
double std_rcpp(const NumericVector data, const bool na_rm);
RcppExport SEXP _matrixprofiler_std_rcpp(SEXP dataSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(std_rcpp(data, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// list_to_matrix
NumericMatrix list_to_matrix(const List x);
RcppExport SEXP _matrixprofiler_list_to_matrix(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(list_to_matrix(x));
    return rcpp_result_gen;
END_RCPP
}
// mode_rcpp
int32_t mode_rcpp(const IntegerVector x);
RcppExport SEXP _matrixprofiler_mode_rcpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(mode_rcpp(x));
    return rcpp_result_gen;
END_RCPP
}
// znorm_rcpp
NumericVector znorm_rcpp(const NumericVector data);
RcppExport SEXP _matrixprofiler_znorm_rcpp(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(znorm_rcpp(data));
    return rcpp_result_gen;
END_RCPP
}
// normalize_rcpp
NumericVector normalize_rcpp(const NumericVector data, double min, double max);
RcppExport SEXP _matrixprofiler_normalize_rcpp(SEXP dataSEXP, SEXP minSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< double >::type min(minSEXP);
    Rcpp::traits::input_parameter< double >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(normalize_rcpp(data, min, max));
    return rcpp_result_gen;
END_RCPP
}
// binary_split_rcpp
IntegerVector binary_split_rcpp(const uint32_t n);
RcppExport SEXP _matrixprofiler_binary_split_rcpp(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const uint32_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(binary_split_rcpp(n));
    return rcpp_result_gen;
END_RCPP
}
// ed_corr_rcpp
NumericVector ed_corr_rcpp(const NumericVector data, uint32_t window_size);
RcppExport SEXP _matrixprofiler_ed_corr_rcpp(SEXP dataSEXP, SEXP window_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type window_size(window_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(ed_corr_rcpp(data, window_size));
    return rcpp_result_gen;
END_RCPP
}
// corr_ed_rcpp
NumericVector corr_ed_rcpp(const NumericVector data, uint32_t window_size);
RcppExport SEXP _matrixprofiler_corr_ed_rcpp(SEXP dataSEXP, SEXP window_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type window_size(window_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(corr_ed_rcpp(data, window_size));
    return rcpp_result_gen;
END_RCPP
}
// inner_product
double inner_product(const NumericVector a, const NumericVector b);
RcppExport SEXP _matrixprofiler_inner_product(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(inner_product(a, b));
    return rcpp_result_gen;
END_RCPP
}
// sum_of_squares
double sum_of_squares(const NumericVector a);
RcppExport SEXP _matrixprofiler_sum_of_squares(SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(sum_of_squares(a));
    return rcpp_result_gen;
END_RCPP
}
// fft_rcpp
ComplexVector fft_rcpp(const ComplexVector z, bool invert);
RcppExport SEXP _matrixprofiler_fft_rcpp(SEXP zSEXP, SEXP invertSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const ComplexVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< bool >::type invert(invertSEXP);
    rcpp_result_gen = Rcpp::wrap(fft_rcpp(z, invert));
    return rcpp_result_gen;
END_RCPP
}
// mpx_rcpp
List mpx_rcpp(NumericVector data_ref, uint64_t window_size, double ez, double s_size, bool idxs, bool euclidean, bool progress);
RcppExport SEXP _matrixprofiler_mpx_rcpp(SEXP data_refSEXP, SEXP window_sizeSEXP, SEXP ezSEXP, SEXP s_sizeSEXP, SEXP idxsSEXP, SEXP euclideanSEXP, SEXP progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type data_ref(data_refSEXP);
    Rcpp::traits::input_parameter< uint64_t >::type window_size(window_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type ez(ezSEXP);
    Rcpp::traits::input_parameter< double >::type s_size(s_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type idxs(idxsSEXP);
    Rcpp::traits::input_parameter< bool >::type euclidean(euclideanSEXP);
    Rcpp::traits::input_parameter< bool >::type progress(progressSEXP);
    rcpp_result_gen = Rcpp::wrap(mpx_rcpp(data_ref, window_size, ez, s_size, idxs, euclidean, progress));
    return rcpp_result_gen;
END_RCPP
}
// mpxab_rcpp
List mpxab_rcpp(NumericVector data_ref, NumericVector query_ref, uint64_t window_size, double s_size, bool idxs, bool euclidean, bool progress);
RcppExport SEXP _matrixprofiler_mpxab_rcpp(SEXP data_refSEXP, SEXP query_refSEXP, SEXP window_sizeSEXP, SEXP s_sizeSEXP, SEXP idxsSEXP, SEXP euclideanSEXP, SEXP progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type data_ref(data_refSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type query_ref(query_refSEXP);
    Rcpp::traits::input_parameter< uint64_t >::type window_size(window_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type s_size(s_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type idxs(idxsSEXP);
    Rcpp::traits::input_parameter< bool >::type euclidean(euclideanSEXP);
    Rcpp::traits::input_parameter< bool >::type progress(progressSEXP);
    rcpp_result_gen = Rcpp::wrap(mpxab_rcpp(data_ref, query_ref, window_size, s_size, idxs, euclidean, progress));
    return rcpp_result_gen;
END_RCPP
}
// mpx_rcpp_parallel
List mpx_rcpp_parallel(NumericVector data_ref, uint64_t window_size, double ez, double s_size, bool idxs, bool euclidean, bool progress);
RcppExport SEXP _matrixprofiler_mpx_rcpp_parallel(SEXP data_refSEXP, SEXP window_sizeSEXP, SEXP ezSEXP, SEXP s_sizeSEXP, SEXP idxsSEXP, SEXP euclideanSEXP, SEXP progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type data_ref(data_refSEXP);
    Rcpp::traits::input_parameter< uint64_t >::type window_size(window_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type ez(ezSEXP);
    Rcpp::traits::input_parameter< double >::type s_size(s_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type idxs(idxsSEXP);
    Rcpp::traits::input_parameter< bool >::type euclidean(euclideanSEXP);
    Rcpp::traits::input_parameter< bool >::type progress(progressSEXP);
    rcpp_result_gen = Rcpp::wrap(mpx_rcpp_parallel(data_ref, window_size, ez, s_size, idxs, euclidean, progress));
    return rcpp_result_gen;
END_RCPP
}
// mpxab_rcpp_parallel
List mpxab_rcpp_parallel(NumericVector data_ref, NumericVector query_ref, uint64_t window_size, double s_size, bool idxs, bool euclidean, bool progress);
RcppExport SEXP _matrixprofiler_mpxab_rcpp_parallel(SEXP data_refSEXP, SEXP query_refSEXP, SEXP window_sizeSEXP, SEXP s_sizeSEXP, SEXP idxsSEXP, SEXP euclideanSEXP, SEXP progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type data_ref(data_refSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type query_ref(query_refSEXP);
    Rcpp::traits::input_parameter< uint64_t >::type window_size(window_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type s_size(s_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type idxs(idxsSEXP);
    Rcpp::traits::input_parameter< bool >::type euclidean(euclideanSEXP);
    Rcpp::traits::input_parameter< bool >::type progress(progressSEXP);
    rcpp_result_gen = Rcpp::wrap(mpxab_rcpp_parallel(data_ref, query_ref, window_size, s_size, idxs, euclidean, progress));
    return rcpp_result_gen;
END_RCPP
}
// scrimp_rcpp
List scrimp_rcpp(const NumericVector data_ref, const NumericVector query_ref, uint32_t window_size, double ez, double s_size, double pre_scrimp, bool progress);
RcppExport SEXP _matrixprofiler_scrimp_rcpp(SEXP data_refSEXP, SEXP query_refSEXP, SEXP window_sizeSEXP, SEXP ezSEXP, SEXP s_sizeSEXP, SEXP pre_scrimpSEXP, SEXP progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type data_ref(data_refSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type query_ref(query_refSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type window_size(window_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type ez(ezSEXP);
    Rcpp::traits::input_parameter< double >::type s_size(s_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type pre_scrimp(pre_scrimpSEXP);
    Rcpp::traits::input_parameter< bool >::type progress(progressSEXP);
    rcpp_result_gen = Rcpp::wrap(scrimp_rcpp(data_ref, query_ref, window_size, ez, s_size, pre_scrimp, progress));
    return rcpp_result_gen;
END_RCPP
}
// scrimp_rcpp_parallel
List scrimp_rcpp_parallel(const NumericVector data_ref, const NumericVector query_ref, uint32_t window_size, double ez, double s_size, bool progress);
RcppExport SEXP _matrixprofiler_scrimp_rcpp_parallel(SEXP data_refSEXP, SEXP query_refSEXP, SEXP window_sizeSEXP, SEXP ezSEXP, SEXP s_sizeSEXP, SEXP progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type data_ref(data_refSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type query_ref(query_refSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type window_size(window_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type ez(ezSEXP);
    Rcpp::traits::input_parameter< double >::type s_size(s_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type progress(progressSEXP);
    rcpp_result_gen = Rcpp::wrap(scrimp_rcpp_parallel(data_ref, query_ref, window_size, ez, s_size, progress));
    return rcpp_result_gen;
END_RCPP
}
// scrimpab_rcpp
List scrimpab_rcpp(const NumericVector data_ref, const NumericVector query_ref, uint32_t window_size, double s_size, bool progress);
RcppExport SEXP _matrixprofiler_scrimpab_rcpp(SEXP data_refSEXP, SEXP query_refSEXP, SEXP window_sizeSEXP, SEXP s_sizeSEXP, SEXP progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type data_ref(data_refSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type query_ref(query_refSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type window_size(window_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type s_size(s_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type progress(progressSEXP);
    rcpp_result_gen = Rcpp::wrap(scrimpab_rcpp(data_ref, query_ref, window_size, s_size, progress));
    return rcpp_result_gen;
END_RCPP
}
// stamp_rcpp
List stamp_rcpp(const NumericVector data_ref, const NumericVector query_ref, uint32_t window_size, double ez, double s_size, bool progress);
RcppExport SEXP _matrixprofiler_stamp_rcpp(SEXP data_refSEXP, SEXP query_refSEXP, SEXP window_sizeSEXP, SEXP ezSEXP, SEXP s_sizeSEXP, SEXP progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type data_ref(data_refSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type query_ref(query_refSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type window_size(window_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type ez(ezSEXP);
    Rcpp::traits::input_parameter< double >::type s_size(s_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type progress(progressSEXP);
    rcpp_result_gen = Rcpp::wrap(stamp_rcpp(data_ref, query_ref, window_size, ez, s_size, progress));
    return rcpp_result_gen;
END_RCPP
}
// stamp_rcpp_parallel
List stamp_rcpp_parallel(const NumericVector data_ref, const NumericVector query_ref, uint32_t window_size, double ez, double s_size, bool progress);
RcppExport SEXP _matrixprofiler_stamp_rcpp_parallel(SEXP data_refSEXP, SEXP query_refSEXP, SEXP window_sizeSEXP, SEXP ezSEXP, SEXP s_sizeSEXP, SEXP progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type data_ref(data_refSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type query_ref(query_refSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type window_size(window_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type ez(ezSEXP);
    Rcpp::traits::input_parameter< double >::type s_size(s_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type progress(progressSEXP);
    rcpp_result_gen = Rcpp::wrap(stamp_rcpp_parallel(data_ref, query_ref, window_size, ez, s_size, progress));
    return rcpp_result_gen;
END_RCPP
}
// stomp_rcpp
List stomp_rcpp(const NumericVector data_ref, const NumericVector query_ref, uint32_t window_size, double ez, bool progress);
RcppExport SEXP _matrixprofiler_stomp_rcpp(SEXP data_refSEXP, SEXP query_refSEXP, SEXP window_sizeSEXP, SEXP ezSEXP, SEXP progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type data_ref(data_refSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type query_ref(query_refSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type window_size(window_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type ez(ezSEXP);
    Rcpp::traits::input_parameter< bool >::type progress(progressSEXP);
    rcpp_result_gen = Rcpp::wrap(stomp_rcpp(data_ref, query_ref, window_size, ez, progress));
    return rcpp_result_gen;
END_RCPP
}
// stomp_rcpp_parallel
List stomp_rcpp_parallel(const NumericVector data_ref, const NumericVector query_ref, uint32_t window_size, double ez, bool progress);
RcppExport SEXP _matrixprofiler_stomp_rcpp_parallel(SEXP data_refSEXP, SEXP query_refSEXP, SEXP window_sizeSEXP, SEXP ezSEXP, SEXP progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type data_ref(data_refSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type query_ref(query_refSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type window_size(window_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type ez(ezSEXP);
    Rcpp::traits::input_parameter< bool >::type progress(progressSEXP);
    rcpp_result_gen = Rcpp::wrap(stomp_rcpp_parallel(data_ref, query_ref, window_size, ez, progress));
    return rcpp_result_gen;
END_RCPP
}
// movmean_rcpp
NumericVector movmean_rcpp(const NumericVector data, const uint32_t window_size);
RcppExport SEXP _matrixprofiler_movmean_rcpp(SEXP dataSEXP, SEXP window_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const uint32_t >::type window_size(window_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(movmean_rcpp(data, window_size));
    return rcpp_result_gen;
END_RCPP
}
// movstd_rcpp
NumericVector movstd_rcpp(const NumericVector data, const uint32_t window_size);
RcppExport SEXP _matrixprofiler_movstd_rcpp(SEXP dataSEXP, SEXP window_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const uint32_t >::type window_size(window_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(movstd_rcpp(data, window_size));
    return rcpp_result_gen;
END_RCPP
}
// movmean_std_rcpp
List movmean_std_rcpp(const NumericVector data, const uint32_t window_size);
RcppExport SEXP _matrixprofiler_movmean_std_rcpp(SEXP dataSEXP, SEXP window_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const uint32_t >::type window_size(window_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(movmean_std_rcpp(data, window_size));
    return rcpp_result_gen;
END_RCPP
}
// movvar_rcpp
NumericVector movvar_rcpp(const NumericVector data, const uint32_t window_size);
RcppExport SEXP _matrixprofiler_movvar_rcpp(SEXP dataSEXP, SEXP window_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const uint32_t >::type window_size(window_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(movvar_rcpp(data, window_size));
    return rcpp_result_gen;
END_RCPP
}
// movvar2_rcpp
NumericVector movvar2_rcpp(const NumericVector data, uint32_t window_size);
RcppExport SEXP _matrixprofiler_movvar2_rcpp(SEXP dataSEXP, SEXP window_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type window_size(window_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(movvar2_rcpp(data, window_size));
    return rcpp_result_gen;
END_RCPP
}
// movsum_rcpp
NumericVector movsum_rcpp(NumericVector data, uint32_t window_size);
RcppExport SEXP _matrixprofiler_movsum_rcpp(SEXP dataSEXP, SEXP window_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type window_size(window_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(movsum_rcpp(data, window_size));
    return rcpp_result_gen;
END_RCPP
}
// movsum_ogita_rcpp
NumericVector movsum_ogita_rcpp(const NumericVector data, uint32_t window_size);
RcppExport SEXP _matrixprofiler_movsum_ogita_rcpp(SEXP dataSEXP, SEXP window_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type window_size(window_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(movsum_ogita_rcpp(data, window_size));
    return rcpp_result_gen;
END_RCPP
}
// precision_test_rcpp
double precision_test_rcpp(std::vector<double> d);
RcppExport SEXP _matrixprofiler_precision_test_rcpp(SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(precision_test_rcpp(d));
    return rcpp_result_gen;
END_RCPP
}
// movmin_rcpp
NumericVector movmin_rcpp(const NumericVector data, uint32_t window_size);
RcppExport SEXP _matrixprofiler_movmin_rcpp(SEXP dataSEXP, SEXP window_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type window_size(window_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(movmin_rcpp(data, window_size));
    return rcpp_result_gen;
END_RCPP
}
// movmax_rcpp
NumericVector movmax_rcpp(const NumericVector data, uint32_t window_size);
RcppExport SEXP _matrixprofiler_movmax_rcpp(SEXP dataSEXP, SEXP window_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type window_size(window_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(movmax_rcpp(data, window_size));
    return rcpp_result_gen;
END_RCPP
}
// movmean_weighted_rcpp
NumericVector movmean_weighted_rcpp(const NumericVector data, uint32_t window_size, double eps);
RcppExport SEXP _matrixprofiler_movmean_weighted_rcpp(SEXP dataSEXP, SEXP window_sizeSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type window_size(window_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(movmean_weighted_rcpp(data, window_size, eps));
    return rcpp_result_gen;
END_RCPP
}
// movmean_fading_rcpp
NumericVector movmean_fading_rcpp(const NumericVector data, uint32_t window_size, double eps);
RcppExport SEXP _matrixprofiler_movmean_fading_rcpp(SEXP dataSEXP, SEXP window_sizeSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type window_size(window_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(movmean_fading_rcpp(data, window_size, eps));
    return rcpp_result_gen;
END_RCPP
}
// movsum_weighted_rcpp
NumericVector movsum_weighted_rcpp(NumericVector data, uint32_t window_size, double eps);
RcppExport SEXP _matrixprofiler_movsum_weighted_rcpp(SEXP dataSEXP, SEXP window_sizeSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type window_size(window_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(movsum_weighted_rcpp(data, window_size, eps));
    return rcpp_result_gen;
END_RCPP
}
// movsum_fading_rcpp
NumericVector movsum_fading_rcpp(NumericVector data, uint32_t window_size, double eps);
RcppExport SEXP _matrixprofiler_movsum_fading_rcpp(SEXP dataSEXP, SEXP window_sizeSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type window_size(window_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(movsum_fading_rcpp(data, window_size, eps));
    return rcpp_result_gen;
END_RCPP
}
// movvar_weighted_rcpp
NumericVector movvar_weighted_rcpp(const NumericVector data, uint32_t window_size, double eps);
RcppExport SEXP _matrixprofiler_movvar_weighted_rcpp(SEXP dataSEXP, SEXP window_sizeSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type window_size(window_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(movvar_weighted_rcpp(data, window_size, eps));
    return rcpp_result_gen;
END_RCPP
}
// movvar_fading_rcpp
NumericVector movvar_fading_rcpp(const NumericVector data, uint32_t window_size, double eps);
RcppExport SEXP _matrixprofiler_movvar_fading_rcpp(SEXP dataSEXP, SEXP window_sizeSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type window_size(window_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(movvar_fading_rcpp(data, window_size, eps));
    return rcpp_result_gen;
END_RCPP
}
// muinvn_rcpp
List muinvn_rcpp(const NumericVector data, uint32_t window_size);
RcppExport SEXP _matrixprofiler_muinvn_rcpp(SEXP dataSEXP, SEXP window_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type window_size(window_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(muinvn_rcpp(data, window_size));
    return rcpp_result_gen;
END_RCPP
}
// muinvn_rcpp_parallel
List muinvn_rcpp_parallel(const NumericVector data, uint32_t window_size);
RcppExport SEXP _matrixprofiler_muinvn_rcpp_parallel(SEXP dataSEXP, SEXP window_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type window_size(window_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(muinvn_rcpp_parallel(data, window_size));
    return rcpp_result_gen;
END_RCPP
}
// zero_crossing_rcpp
IntegerVector zero_crossing_rcpp(const NumericVector data, const uint32_t window_size);
RcppExport SEXP _matrixprofiler_zero_crossing_rcpp(SEXP dataSEXP, SEXP window_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const uint32_t >::type window_size(window_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(zero_crossing_rcpp(data, window_size));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_matrixprofiler_mass_weighted_rcpp", (DL_FUNC) &_matrixprofiler_mass_weighted_rcpp, 11},
    {"_matrixprofiler_mass_absolute_rcpp", (DL_FUNC) &_matrixprofiler_mass_absolute_rcpp, 6},
    {"_matrixprofiler_mass2_rcpp", (DL_FUNC) &_matrixprofiler_mass2_rcpp, 8},
    {"_matrixprofiler_mass3_rcpp", (DL_FUNC) &_matrixprofiler_mass3_rcpp, 9},
    {"_matrixprofiler_mass3_rcpp_parallel", (DL_FUNC) &_matrixprofiler_mass3_rcpp_parallel, 9},
    {"_matrixprofiler_set_k_rcpp", (DL_FUNC) &_matrixprofiler_set_k_rcpp, 3},
    {"_matrixprofiler_find_best_k_rcpp", (DL_FUNC) &_matrixprofiler_find_best_k_rcpp, 3},
    {"_matrixprofiler_mass_pre_rcpp", (DL_FUNC) &_matrixprofiler_mass_pre_rcpp, 3},
    {"_matrixprofiler_mass_pre_abs_rcpp", (DL_FUNC) &_matrixprofiler_mass_pre_abs_rcpp, 3},
    {"_matrixprofiler_mass_pre_weighted_rcpp", (DL_FUNC) &_matrixprofiler_mass_pre_weighted_rcpp, 4},
    {"_matrixprofiler_std_rcpp", (DL_FUNC) &_matrixprofiler_std_rcpp, 2},
    {"_matrixprofiler_list_to_matrix", (DL_FUNC) &_matrixprofiler_list_to_matrix, 1},
    {"_matrixprofiler_mode_rcpp", (DL_FUNC) &_matrixprofiler_mode_rcpp, 1},
    {"_matrixprofiler_znorm_rcpp", (DL_FUNC) &_matrixprofiler_znorm_rcpp, 1},
    {"_matrixprofiler_normalize_rcpp", (DL_FUNC) &_matrixprofiler_normalize_rcpp, 3},
    {"_matrixprofiler_binary_split_rcpp", (DL_FUNC) &_matrixprofiler_binary_split_rcpp, 1},
    {"_matrixprofiler_ed_corr_rcpp", (DL_FUNC) &_matrixprofiler_ed_corr_rcpp, 2},
    {"_matrixprofiler_corr_ed_rcpp", (DL_FUNC) &_matrixprofiler_corr_ed_rcpp, 2},
    {"_matrixprofiler_inner_product", (DL_FUNC) &_matrixprofiler_inner_product, 2},
    {"_matrixprofiler_sum_of_squares", (DL_FUNC) &_matrixprofiler_sum_of_squares, 1},
    {"_matrixprofiler_fft_rcpp", (DL_FUNC) &_matrixprofiler_fft_rcpp, 2},
    {"_matrixprofiler_mpx_rcpp", (DL_FUNC) &_matrixprofiler_mpx_rcpp, 7},
    {"_matrixprofiler_mpxab_rcpp", (DL_FUNC) &_matrixprofiler_mpxab_rcpp, 7},
    {"_matrixprofiler_mpx_rcpp_parallel", (DL_FUNC) &_matrixprofiler_mpx_rcpp_parallel, 7},
    {"_matrixprofiler_mpxab_rcpp_parallel", (DL_FUNC) &_matrixprofiler_mpxab_rcpp_parallel, 7},
    {"_matrixprofiler_scrimp_rcpp", (DL_FUNC) &_matrixprofiler_scrimp_rcpp, 7},
    {"_matrixprofiler_scrimp_rcpp_parallel", (DL_FUNC) &_matrixprofiler_scrimp_rcpp_parallel, 6},
    {"_matrixprofiler_scrimpab_rcpp", (DL_FUNC) &_matrixprofiler_scrimpab_rcpp, 5},
    {"_matrixprofiler_stamp_rcpp", (DL_FUNC) &_matrixprofiler_stamp_rcpp, 6},
    {"_matrixprofiler_stamp_rcpp_parallel", (DL_FUNC) &_matrixprofiler_stamp_rcpp_parallel, 6},
    {"_matrixprofiler_stomp_rcpp", (DL_FUNC) &_matrixprofiler_stomp_rcpp, 5},
    {"_matrixprofiler_stomp_rcpp_parallel", (DL_FUNC) &_matrixprofiler_stomp_rcpp_parallel, 5},
    {"_matrixprofiler_movmean_rcpp", (DL_FUNC) &_matrixprofiler_movmean_rcpp, 2},
    {"_matrixprofiler_movstd_rcpp", (DL_FUNC) &_matrixprofiler_movstd_rcpp, 2},
    {"_matrixprofiler_movmean_std_rcpp", (DL_FUNC) &_matrixprofiler_movmean_std_rcpp, 2},
    {"_matrixprofiler_movvar_rcpp", (DL_FUNC) &_matrixprofiler_movvar_rcpp, 2},
    {"_matrixprofiler_movvar2_rcpp", (DL_FUNC) &_matrixprofiler_movvar2_rcpp, 2},
    {"_matrixprofiler_movsum_rcpp", (DL_FUNC) &_matrixprofiler_movsum_rcpp, 2},
    {"_matrixprofiler_movsum_ogita_rcpp", (DL_FUNC) &_matrixprofiler_movsum_ogita_rcpp, 2},
    {"_matrixprofiler_precision_test_rcpp", (DL_FUNC) &_matrixprofiler_precision_test_rcpp, 1},
    {"_matrixprofiler_movmin_rcpp", (DL_FUNC) &_matrixprofiler_movmin_rcpp, 2},
    {"_matrixprofiler_movmax_rcpp", (DL_FUNC) &_matrixprofiler_movmax_rcpp, 2},
    {"_matrixprofiler_movmean_weighted_rcpp", (DL_FUNC) &_matrixprofiler_movmean_weighted_rcpp, 3},
    {"_matrixprofiler_movmean_fading_rcpp", (DL_FUNC) &_matrixprofiler_movmean_fading_rcpp, 3},
    {"_matrixprofiler_movsum_weighted_rcpp", (DL_FUNC) &_matrixprofiler_movsum_weighted_rcpp, 3},
    {"_matrixprofiler_movsum_fading_rcpp", (DL_FUNC) &_matrixprofiler_movsum_fading_rcpp, 3},
    {"_matrixprofiler_movvar_weighted_rcpp", (DL_FUNC) &_matrixprofiler_movvar_weighted_rcpp, 3},
    {"_matrixprofiler_movvar_fading_rcpp", (DL_FUNC) &_matrixprofiler_movvar_fading_rcpp, 3},
    {"_matrixprofiler_muinvn_rcpp", (DL_FUNC) &_matrixprofiler_muinvn_rcpp, 2},
    {"_matrixprofiler_muinvn_rcpp_parallel", (DL_FUNC) &_matrixprofiler_muinvn_rcpp_parallel, 2},
    {"_matrixprofiler_zero_crossing_rcpp", (DL_FUNC) &_matrixprofiler_zero_crossing_rcpp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_matrixprofiler(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
